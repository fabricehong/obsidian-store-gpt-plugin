/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => StoreGPTPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/sgBlock.ts
var import_obsidian4 = require("obsidian");

// src/prompt-resolver.ts
var import_obsidian = require("obsidian");

// src/markdown-leveler.ts
function relevelMarkdownHeaders(markdown, targetBaseLevel) {
  const lines = markdown.split("\n");
  let adjustedMarkdown = "";
  let minCurrentLevel = Infinity;
  lines.forEach((line) => {
    const match = line.match(/^(#+)/);
    if (match) {
      const level = match[0].length;
      if (level < minCurrentLevel) {
        minCurrentLevel = level;
      }
    }
  });
  const levelOffset = targetBaseLevel - minCurrentLevel;
  lines.forEach((line) => {
    const match = line.match(/^(#+)(\s+.*)/);
    if (match) {
      let newLevel = match[1].length + levelOffset;
      if (newLevel < 1)
        newLevel = 1;
      if (newLevel > 6) {
        const boldText = `**${newLevel - 6}. ${match[2].trim()}**`;
        adjustedMarkdown += boldText + "\n";
      } else {
        const newHeader = `${"#".repeat(newLevel)}${match[2]}`;
        adjustedMarkdown += newHeader + "\n";
      }
    } else {
      adjustedMarkdown += line + "\n";
    }
  });
  return adjustedMarkdown.trim();
}
function computePlaceHoldersMarkdownLevel(markdown) {
  const lines = markdown.split("\n");
  let currentLevel = 0;
  let result = {};
  lines.forEach((line) => {
    const headerMatch = line.match(/^(#+)/);
    if (headerMatch) {
      currentLevel = headerMatch[0].length;
    }
    const placeholderMatches = [...line.matchAll(new RegExp(PLACEHOLDER_REGEX, "g"))];
    placeholderMatches.forEach((match) => {
      const placeholderName = match[1];
      if (placeholderName && !(placeholderName in result)) {
        result[placeholderName] = currentLevel;
      }
    });
    if (!headerMatch && !line.trim().startsWith("{{")) {
      currentLevel = 0;
    }
  });
  return result;
}

// src/prompt.ts
var PLACEHOLDER_REGEX = "\\{\\{([\\w-]+)\\}\\}";
var Prompt = class {
  constructor(template, filepath, section = void 0) {
    this.template = template;
    this.filepath = filepath;
    this.section = section;
  }
  remplacePlaceholders(variables) {
    const placeholdersLevels = computePlaceHoldersMarkdownLevel(this.template);
    return this.template.replace(new RegExp(PLACEHOLDER_REGEX, "g"), (match, variableName) => {
      if (!variables.hasOwnProperty(variableName)) {
        throw new Error(`Variable '${variableName}' not found`);
      }
      const placeholderLevel = placeholdersLevels[variableName];
      const markdown = variables[variableName];
      return relevelMarkdownHeaders(markdown, placeholderLevel + 1);
    });
  }
  isEqual(other) {
    return this.filepath === other.filepath && this.section === other.section;
  }
  getPromptId() {
    return !!this.section ? `${this.filepath}#${this.section}` : this.filepath;
  }
};

// src/sg-block-utils.ts
function getSgBlocContent(content) {
  const regex = /^\s*```sg\n([\s\S]*?)\n```\s*$/;
  const correspondance = content.match(regex);
  if (correspondance) {
    return correspondance[1].trim();
  }
  return void 0;
}
function removeFrontmatter(content) {
  const regex = /^---[\s\S]+?---\n?/;
  return content.replace(regex, "");
}

// src/prompt-resolver.ts
var PromptResolver = class {
  constructor(app, promptHistory = []) {
    this.app = app;
    this.promptHistory = promptHistory;
  }
  async resolvePrompt(prompt, sourceFile) {
    const newPromptHistory = this.promptHistory.concat(prompt);
    if (this.promptHistory.some((p) => p.isEqual(prompt))) {
      const chainDescription = newPromptHistory.map((p) => {
        if (p.isEqual(prompt)) {
          return `*${p.getPromptId()}*`;
        }
        return p.getPromptId();
      }).join(" -> ");
      throw new Error(`Circular reference detected: ${chainDescription}`);
    }
    const file = this.app.vault.getAbstractFileByPath(sourceFile);
    const variables = {};
    if (!(file instanceof import_obsidian.TFile)) {
      throw new Error("no instance of TFile");
    }
    const fileCache = this.app.metadataCache.getFileCache(file);
    if (!fileCache) {
      throw new Error("Aucun cache de fichier trouv\xE9.");
    }
    const frontmatter = fileCache.frontmatter || {};
    for (const key in frontmatter) {
      const linktext = frontmatter[key];
      const linkTargetContent = await this.determineVariableValue(linktext, file.path);
      if (!linkTargetContent) {
        variables[key] = linktext;
      } else {
        const withoutFrontmatter = removeFrontmatter(linkTargetContent.content);
        const sgBlock = getSgBlocContent(withoutFrontmatter);
        if (sgBlock) {
          const newPrompt = new Prompt(
            sgBlock,
            linkTargetContent.filepath,
            linkTargetContent.section
          );
          const promptResolver = new PromptResolver(this.app, newPromptHistory);
          variables[key] = await promptResolver.resolvePrompt(newPrompt, linkTargetContent.filepath);
        } else {
          variables[key] = withoutFrontmatter;
        }
      }
    }
    return prompt.remplacePlaceholders(variables);
  }
  async determineVariableValue(linktext, mainfilePath) {
    const parsed = this.parseLinktext(linktext);
    if (!parsed) {
      return void 0;
    }
    const { path, subpath } = parsed;
    const destFile = this.app.metadataCache.getFirstLinkpathDest(path, mainfilePath);
    if (!destFile) {
      throw new Error(`File '${path}' not found`);
    }
    const linkedFile = this.app.vault.getAbstractFileByPath(destFile.path);
    if (!(linkedFile instanceof import_obsidian.TFile)) {
      throw new Error("no instance of TFile");
    }
    let content = await this.app.vault.read(linkedFile);
    let result;
    if (subpath) {
      result = this.extractSectionContent(content, subpath);
    } else {
      result = content;
    }
    return {
      content: result,
      filepath: destFile.path,
      section: subpath
    };
  }
  parseLinktext(linktext) {
    const match = linktext.match(/\[\[([^\]]+?)(#([^#]+?))?\]\]/);
    if (match) {
      const linkAndLabel = match[1].split("|");
      return { path: linkAndLabel[0], subpath: match[3] };
    }
    return void 0;
  }
  extractSectionContent(content, subpath) {
    const lines = content.split("\n");
    let sectionContent = "";
    let inSection = false;
    let currentLevel = 0;
    for (const line of lines) {
      const headerMatch = line.match(/^(#+)\s+(.*)/);
      if (headerMatch) {
        const level = headerMatch[1].length;
        const title = headerMatch[2].trim();
        if (inSection && level <= currentLevel) {
          break;
        }
        if (title === subpath) {
          inSection = true;
          currentLevel = level;
          continue;
        }
      }
      if (inSection) {
        sectionContent += line + "\n";
      }
    }
    return sectionContent.trim();
  }
};

// src/CopyPromptModal.ts
var import_obsidian2 = require("obsidian");
var CopyPromptModal = class extends import_obsidian2.Modal {
  constructor(app, prompt, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.prompt = prompt;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Prompt" });
    const textarea = contentEl.createEl("textarea", {
      attr: {
        style: "width: 100%; box-sizing: border-box; margin-bottom: 20px;"
        // Assure que le textarea prend toute la largeur et ajoute un peu d'espace en dessous
      }
    });
    textarea.value = this.prompt;
    textarea.rows = 10;
    const buttonContainer = contentEl.createEl("div", {
      attr: {
        style: "text-align: right;"
        // Alignement du bouton à droite
      }
    });
    const button = buttonContainer.createEl("button", { text: "Submit" });
    button.addClass("mod-cta");
    button.addEventListener("click", () => {
      this.close();
      this.onSubmit(textarea.value);
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/ErrorModal.ts
var import_obsidian3 = require("obsidian");
var ErrorModal = class extends import_obsidian3.Modal {
  constructor(app, message) {
    super(app);
    this.message = message;
  }
  onOpen() {
    const { contentEl } = this;
    const messageEl = contentEl.createEl("p");
    messageEl.setText(this.message);
    const okButton = contentEl.createEl("button", {
      text: "OK",
      cls: "mod-cta"
      // Utilise une classe pour ajouter des styles spécifiques si nécessaire
    });
    okButton.addEventListener("click", () => {
      this.close();
    });
    contentEl.style.display = "flex";
    contentEl.style.flexDirection = "column";
    contentEl.style.alignItems = "center";
    contentEl.style.justifyContent = "center";
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/sgBlock.ts
var SGBlock = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.plugin.registerMarkdownCodeBlockProcessor(
      "sg",
      async (source, el, ctx) => {
        this.blockTgHandler(source, el, ctx);
      }
    );
  }
  async blockTgHandler(source, container, { sourcePath: path }) {
    setTimeout(async () => {
      const preElement = document.createElement("pre");
      preElement.style.whiteSpace = "pre-wrap";
      const codeElement = document.createElement("code");
      codeElement.textContent = source;
      preElement.appendChild(codeElement);
      container.appendChild(preElement);
      this.addTGMenu(container, source, path);
    }, 100);
  }
  addTGMenu(el, source, sourcePath) {
    var _a;
    const div = document.createElement("div");
    div.classList.add("plug-tg-tgmenu", "plug-tg-flex", "plug-tg-justify-end");
    const generateSVG = `<svg viewBox="0 0 100 100" class="svg-icon GENERATE_ICON"><defs><style>.cls-1{fill:none;stroke:currentColor;stroke-linecap:round;stroke-linejoin:round;stroke-width:4px;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="VECTOR"><rect class="cls-1" x="74.98" y="21.55" width="18.9" height="37.59"></rect><path class="cls-1" d="M38.44,27.66a8,8,0,0,0-8.26,1.89L24.8,34.86a25.44,25.44,0,0,0-6,9.3L14.14,56.83C11.33,64.7,18.53,67.3,21,60.9" transform="translate(-1.93 -15.75)"></path><polyline class="cls-1" points="74.98 25.58 56.61 18.72 46.72 15.45"></polyline><path class="cls-1" d="M55.45,46.06,42.11,49.43,22.76,50.61c-8.27,1.3-5.51,11.67,4.88,12.8L46.5,65.78,53,68.4a23.65,23.65,0,0,0,17.9,0l6-2.46" transform="translate(-1.93 -15.75)"></path><path class="cls-1" d="M37.07,64.58v5.91A3.49,3.49,0,0,1,33.65,74h0a3.49,3.49,0,0,1-3.45-3.52V64.58" transform="translate(-1.93 -15.75)"></path><path class="cls-1" d="M48,66.58v5.68a3.4,3.4,0,0,1-3.34,3.46h0a3.4,3.4,0,0,1-3.34-3.45h0V65.58" transform="translate(-1.93 -15.75)"></path><polyline class="cls-1" points="28.75 48.05 22.66 59.3 13.83 65.61 14.41 54.5 19.11 45.17"></polyline><polyline class="cls-1" points="25.17 34.59 43.75 0.25 52.01 5.04 36.39 33.91"></polyline><line class="cls-1" x1="0.25" y1="66.92" x2="13.83" y2="66.92"></line></g></g></svg>`;
    const button = this.createRunButton("Generate Text", generateSVG);
    button.addEventListener("click", async () => {
      console.log("trigger");
      try {
        const promptResolver = new PromptResolver(this.plugin.app);
        let resolvedPrompt = await promptResolver.resolvePrompt(new Prompt(source, sourcePath), sourcePath);
        new CopyPromptModal(this.plugin.app, resolvedPrompt, (result) => {
          this.copyToClipboard(result);
          new import_obsidian4.Notice("Prompt copied to clipboard", 3e3);
        }).open();
      } catch (e) {
        new ErrorModal(this.plugin.app, e.message).open();
        throw e;
      }
    });
    div.appendChild(button);
    (_a = el.parentElement) == null ? void 0 : _a.appendChild(div);
  }
  async copyToClipboard(texte) {
    try {
      await navigator.clipboard.writeText(texte);
      console.log("Texte copi\xE9 dans le presse-papier");
    } catch (err) {
      console.error("Erreur lors de la copie dans le presse-papier", err);
    }
  }
  createRunButton(label, svg) {
    const button = document.createElement("div");
    button.classList.add("clickable-icon");
    button.setAttribute("aria-label", label);
    button.innerHTML = svg;
    return button;
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var StoreGPTPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    new SGBlock(this);
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3NnQmxvY2sudHMiLCAic3JjL3Byb21wdC1yZXNvbHZlci50cyIsICJzcmMvbWFya2Rvd24tbGV2ZWxlci50cyIsICJzcmMvcHJvbXB0LnRzIiwgInNyYy9zZy1ibG9jay11dGlscy50cyIsICJzcmMvQ29weVByb21wdE1vZGFsLnRzIiwgInNyYy9FcnJvck1vZGFsLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBQbHVnaW4gfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgU0dCbG9jayBmcm9tIFwiLi9zZ0Jsb2NrXCI7XG5cbi8vIFJlbWVtYmVyIHRvIHJlbmFtZSB0aGVzZSBjbGFzc2VzIGFuZCBpbnRlcmZhY2VzIVxuXG5pbnRlcmZhY2UgU3RvcmVHUFRQbHVnaW5TZXR0aW5ncyB7XG5cdG15U2V0dGluZzogc3RyaW5nO1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBTdG9yZUdQVFBsdWdpblNldHRpbmdzID0ge1xuXHRteVNldHRpbmc6ICdkZWZhdWx0J1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdG9yZUdQVFBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG5cdHNldHRpbmdzOiBTdG9yZUdQVFBsdWdpblNldHRpbmdzO1xuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG5cdFx0bmV3IFNHQmxvY2sodGhpcyk7XG5cdH1cblxuXHRvbnVubG9hZCgpIHtcblxuXHR9XG5cblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuXHR9XG5cblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG5cdH1cbn1cbiIsICJpbXBvcnQgeyBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBTdG9yZUdQVFBsdWdpbiBmcm9tIFwiLi9tYWluXCI7XG5pbXBvcnQgeyBQcm9tcHRSZXNvbHZlciB9IGZyb20gXCIuL3Byb21wdC1yZXNvbHZlclwiO1xuaW1wb3J0IHsgQ29weVByb21wdE1vZGFsIH0gZnJvbSBcIi4vQ29weVByb21wdE1vZGFsXCI7XG5pbXBvcnQgeyBQcm9tcHQgfSBmcm9tIFwiLi9wcm9tcHRcIjtcbmltcG9ydCB7IEVycm9yTW9kYWwgfSBmcm9tIFwiLi9FcnJvck1vZGFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNHQmxvY2sge1xuXHRwbHVnaW46IFN0b3JlR1BUUGx1Z2luO1xuXHRjb25zdHJ1Y3RvcihwbHVnaW46IFN0b3JlR1BUUGx1Z2luKSB7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cblx0XHR0aGlzLnBsdWdpbi5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKFxuXHRcdFx0XCJzZ1wiLFxuXHRcdFx0YXN5bmMgKHNvdXJjZSwgZWwsIGN0eCkgPT4ge1xuXHRcdFx0XHR0aGlzLmJsb2NrVGdIYW5kbGVyKHNvdXJjZSwgZWwsIGN0eCk7XG5cdFx0XHR9XG5cdFx0KTtcblx0fVxuXG5cdGFzeW5jIGJsb2NrVGdIYW5kbGVyKFxuXHRcdHNvdXJjZTogc3RyaW5nLFxuXHRcdGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG5cdFx0eyBzb3VyY2VQYXRoOiBwYXRoIH06IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHRcblx0KSB7XG5cdFx0c2V0VGltZW91dChhc3luYyAoKSA9PiB7XG5cdFx0XHRjb25zdCBwcmVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncHJlJyk7XG5cdFx0XHRwcmVFbGVtZW50LnN0eWxlLndoaXRlU3BhY2UgPSAncHJlLXdyYXAnOyAvLyBHYXJkZSBsZXMgc2F1dHMgZGUgbGlnbmUgZXQgZXNwYWNlc1xuXG5cdFx0XHQvLyBDclx1MDBFOWF0aW9uIGQndW4gXHUwMEU5bFx1MDBFOW1lbnQgY29kZSBxdWkgY29udGllbmRyYSBsZSB0ZXh0ZVxuXHRcdFx0Y29uc3QgY29kZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjb2RlJyk7XG5cdFx0XHRjb2RlRWxlbWVudC50ZXh0Q29udGVudCA9IHNvdXJjZTsgLy8gQXNzaWduZSBsZSBjb250ZW51IHNvdXJjZSBcdTAwRTAgbCdcdTAwRTlsXHUwMEU5bWVudCBjb2RlXG5cblx0XHRcdC8vIEFqb3V0ZSBsJ1x1MDBFOWxcdTAwRTltZW50IGNvZGUgXHUwMEUwIGwnXHUwMEU5bFx1MDBFOW1lbnQgcHJlXG5cdFx0XHRwcmVFbGVtZW50LmFwcGVuZENoaWxkKGNvZGVFbGVtZW50KTtcblxuXHRcdFx0Ly8gQWpvdXRlIGwnXHUwMEU5bFx1MDBFOW1lbnQgcHJlIGF1IGNvbnRhaW5lciBwb3VyIGwnYWZmaWNoYWdlXG5cdFx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQocHJlRWxlbWVudCk7XG5cblx0XHRcdHRoaXMuYWRkVEdNZW51KGNvbnRhaW5lciwgc291cmNlLCBwYXRoKTtcblx0XHR9LCAxMDApO1xuXHR9XG5cblx0cHJpdmF0ZSBhZGRUR01lbnUoXG5cdFx0ZWw6IEhUTUxFbGVtZW50LFxuXHRcdHNvdXJjZTogc3RyaW5nLFxuXHRcdHNvdXJjZVBhdGg6IHN0cmluZ1xuXHQpIHtcblx0XHRjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdGRpdi5jbGFzc0xpc3QuYWRkKFwicGx1Zy10Zy10Z21lbnVcIiwgXCJwbHVnLXRnLWZsZXhcIiwgXCJwbHVnLXRnLWp1c3RpZnktZW5kXCIpO1xuXHRcdGNvbnN0IGdlbmVyYXRlU1ZHID0gYDxzdmcgdmlld0JveD1cIjAgMCAxMDAgMTAwXCIgY2xhc3M9XCJzdmctaWNvbiBHRU5FUkFURV9JQ09OXCI+PGRlZnM+PHN0eWxlPi5jbHMtMXtmaWxsOm5vbmU7c3Ryb2tlOmN1cnJlbnRDb2xvcjtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLXdpZHRoOjRweDt9PC9zdHlsZT48L2RlZnM+PGcgaWQ9XCJMYXllcl8yXCIgZGF0YS1uYW1lPVwiTGF5ZXIgMlwiPjxnIGlkPVwiVkVDVE9SXCI+PHJlY3QgY2xhc3M9XCJjbHMtMVwiIHg9XCI3NC45OFwiIHk9XCIyMS41NVwiIHdpZHRoPVwiMTguOVwiIGhlaWdodD1cIjM3LjU5XCI+PC9yZWN0PjxwYXRoIGNsYXNzPVwiY2xzLTFcIiBkPVwiTTM4LjQ0LDI3LjY2YTgsOCwwLDAsMC04LjI2LDEuODlMMjQuOCwzNC44NmEyNS40NCwyNS40NCwwLDAsMC02LDkuM0wxNC4xNCw1Ni44M0MxMS4zMyw2NC43LDE4LjUzLDY3LjMsMjEsNjAuOVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtMS45MyAtMTUuNzUpXCI+PC9wYXRoPjxwb2x5bGluZSBjbGFzcz1cImNscy0xXCIgcG9pbnRzPVwiNzQuOTggMjUuNTggNTYuNjEgMTguNzIgNDYuNzIgMTUuNDVcIj48L3BvbHlsaW5lPjxwYXRoIGNsYXNzPVwiY2xzLTFcIiBkPVwiTTU1LjQ1LDQ2LjA2LDQyLjExLDQ5LjQzLDIyLjc2LDUwLjYxYy04LjI3LDEuMy01LjUxLDExLjY3LDQuODgsMTIuOEw0Ni41LDY1Ljc4LDUzLDY4LjRhMjMuNjUsMjMuNjUsMCwwLDAsMTcuOSwwbDYtMi40NlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtMS45MyAtMTUuNzUpXCI+PC9wYXRoPjxwYXRoIGNsYXNzPVwiY2xzLTFcIiBkPVwiTTM3LjA3LDY0LjU4djUuOTFBMy40OSwzLjQ5LDAsMCwxLDMzLjY1LDc0aDBhMy40OSwzLjQ5LDAsMCwxLTMuNDUtMy41MlY2NC41OFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtMS45MyAtMTUuNzUpXCI+PC9wYXRoPjxwYXRoIGNsYXNzPVwiY2xzLTFcIiBkPVwiTTQ4LDY2LjU4djUuNjhhMy40LDMuNCwwLDAsMS0zLjM0LDMuNDZoMGEzLjQsMy40LDAsMCwxLTMuMzQtMy40NWgwVjY1LjU4XCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC0xLjkzIC0xNS43NSlcIj48L3BhdGg+PHBvbHlsaW5lIGNsYXNzPVwiY2xzLTFcIiBwb2ludHM9XCIyOC43NSA0OC4wNSAyMi42NiA1OS4zIDEzLjgzIDY1LjYxIDE0LjQxIDU0LjUgMTkuMTEgNDUuMTdcIj48L3BvbHlsaW5lPjxwb2x5bGluZSBjbGFzcz1cImNscy0xXCIgcG9pbnRzPVwiMjUuMTcgMzQuNTkgNDMuNzUgMC4yNSA1Mi4wMSA1LjA0IDM2LjM5IDMzLjkxXCI+PC9wb2x5bGluZT48bGluZSBjbGFzcz1cImNscy0xXCIgeDE9XCIwLjI1XCIgeTE9XCI2Ni45MlwiIHgyPVwiMTMuODNcIiB5Mj1cIjY2LjkyXCI+PC9saW5lPjwvZz48L2c+PC9zdmc+YDtcblxuXHRcdGNvbnN0IGJ1dHRvbiA9IHRoaXMuY3JlYXRlUnVuQnV0dG9uKFwiR2VuZXJhdGUgVGV4dFwiLCBnZW5lcmF0ZVNWRyk7XG5cdFx0YnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoKSA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZygndHJpZ2dlcicpO1xuXG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IHByb21wdFJlc29sdmVyID0gbmV3IFByb21wdFJlc29sdmVyKHRoaXMucGx1Z2luLmFwcCk7XG5cdFx0XHRcdGxldCByZXNvbHZlZFByb21wdCA9IGF3YWl0IHByb21wdFJlc29sdmVyLnJlc29sdmVQcm9tcHQobmV3IFByb21wdChzb3VyY2UsIHNvdXJjZVBhdGgpLCBzb3VyY2VQYXRoKTtcblxuXHRcdFx0XHRuZXcgQ29weVByb21wdE1vZGFsKHRoaXMucGx1Z2luLmFwcCwgcmVzb2x2ZWRQcm9tcHQsIChyZXN1bHQ6IHN0cmluZykgPT4ge1xuXHRcdFx0XHRcdHRoaXMuY29weVRvQ2xpcGJvYXJkKHJlc3VsdCk7XG5cdFx0XHRcdFx0bmV3IE5vdGljZShcIlByb21wdCBjb3BpZWQgdG8gY2xpcGJvYXJkXCIsIDMwMDApO1xuXHRcdFx0XHR9KS5vcGVuKCk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdG5ldyBFcnJvck1vZGFsKHRoaXMucGx1Z2luLmFwcCwgZS5tZXNzYWdlKS5vcGVuKCk7XG5cdFx0XHRcdHRocm93IGU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRkaXYuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcblx0XHRlbC5wYXJlbnRFbGVtZW50Py5hcHBlbmRDaGlsZChkaXYpO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBjb3B5VG9DbGlwYm9hcmQodGV4dGU6IHN0cmluZykge1xuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh0ZXh0ZSk7XG5cdFx0XHRjb25zb2xlLmxvZygnVGV4dGUgY29waVx1MDBFOSBkYW5zIGxlIHByZXNzZS1wYXBpZXInKTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIGNvcGllIGRhbnMgbGUgcHJlc3NlLXBhcGllcicsIGVycik7XG5cdFx0fVxuXHR9XG5cblx0Y3JlYXRlUnVuQnV0dG9uKGxhYmVsOiBzdHJpbmcsIHN2Zzogc3RyaW5nKSB7XG5cdFx0Y29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRidXR0b24uY2xhc3NMaXN0LmFkZChcImNsaWNrYWJsZS1pY29uXCIpO1xuXHRcdGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIGxhYmVsKTtcblx0XHQvL2FyaWEtbGFiZWwtcG9zaXRpb249XCJyaWdodFwiXG5cdFx0YnV0dG9uLmlubmVySFRNTCA9IHN2ZztcblxuXHRcdHJldHVybiBidXR0b247XG5cdH1cblxufVxuIiwgImltcG9ydCB7IEFwcCwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IFByb21wdCB9IGZyb20gXCIuL3Byb21wdFwiO1xuaW1wb3J0IHsgZ2V0U2dCbG9jQ29udGVudCwgcmVtb3ZlRnJvbnRtYXR0ZXIgfSBmcm9tIFwiLi9zZy1ibG9jay11dGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgUHJvbXB0UmVzb2x2ZXIge1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGFwcDogQXBwLCBwcml2YXRlIHJlYWRvbmx5IHByb21wdEhpc3Rvcnk6IFByb21wdFtdID0gW10pIHt9XG5cblx0cHVibGljIGFzeW5jIHJlc29sdmVQcm9tcHQocHJvbXB0OiBQcm9tcHQsIHNvdXJjZUZpbGU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG5cdFx0Y29uc3QgbmV3UHJvbXB0SGlzdG9yeSA9IHRoaXMucHJvbXB0SGlzdG9yeS5jb25jYXQocHJvbXB0KTtcblxuXHRcdGlmICh0aGlzLnByb21wdEhpc3Rvcnkuc29tZSgocCkgPT4gcC5pc0VxdWFsKHByb21wdCkpKSB7XG5cdFx0XHRjb25zdCBjaGFpbkRlc2NyaXB0aW9uID0gbmV3UHJvbXB0SGlzdG9yeS5tYXAoKHApID0+IHtcblx0XHRcdFx0aWYgKHAuaXNFcXVhbChwcm9tcHQpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGAqJHtwLmdldFByb21wdElkKCl9KmA7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHAuZ2V0UHJvbXB0SWQoKTtcblx0XHRcdH0pLmpvaW4oJyAtPiAnKTtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkOiAke2NoYWluRGVzY3JpcHRpb259YCk7XG5cdFx0fVxuXHRcdGNvbnN0IGZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoc291cmNlRmlsZSk7XG5cdFx0Y29uc3QgdmFyaWFibGVzOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IHt9XG5cblx0XHRpZiAoIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ25vIGluc3RhbmNlIG9mIFRGaWxlJyk7XG5cdFx0fVxuXHRcdC8vIFJcdTAwRTljdXBcdTAwRThyZSBsZSBjYWNoZSBkdSBmaWNoaWVyIGFjdHVlbCBwb3VyIGFjY1x1MDBFOWRlciBhdSBmcm9udG1hdHRlclxuXHRcdGNvbnN0IGZpbGVDYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuXHRcdGlmICghZmlsZUNhY2hlKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJBdWN1biBjYWNoZSBkZSBmaWNoaWVyIHRyb3V2XHUwMEU5LlwiKTtcblx0XHR9XG5cdFx0Y29uc3QgZnJvbnRtYXR0ZXIgPSBmaWxlQ2FjaGUuZnJvbnRtYXR0ZXIgfHwge307XG5cblx0XHRmb3IgKGNvbnN0IGtleSBpbiBmcm9udG1hdHRlcikge1xuXHRcdFx0Y29uc3QgbGlua3RleHQgPSBmcm9udG1hdHRlcltrZXldO1xuXHRcdFx0Y29uc3QgbGlua1RhcmdldENvbnRlbnQgPSBhd2FpdCB0aGlzLmRldGVybWluZVZhcmlhYmxlVmFsdWUobGlua3RleHQsIGZpbGUucGF0aCk7XG5cdFx0XHRpZiAoIWxpbmtUYXJnZXRDb250ZW50KSB7XG5cdFx0XHRcdHZhcmlhYmxlc1trZXldID0gbGlua3RleHQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCB3aXRob3V0RnJvbnRtYXR0ZXIgPSByZW1vdmVGcm9udG1hdHRlcihsaW5rVGFyZ2V0Q29udGVudC5jb250ZW50KTtcblx0XHRcdFx0Y29uc3Qgc2dCbG9jayA9IGdldFNnQmxvY0NvbnRlbnQod2l0aG91dEZyb250bWF0dGVyKTtcblx0XHRcdFx0aWYgKHNnQmxvY2spIHtcblx0XHRcdFx0XHRjb25zdCBuZXdQcm9tcHQgPSBuZXcgUHJvbXB0KFxuXHRcdFx0XHRcdFx0c2dCbG9jayxcblx0XHRcdFx0XHRcdGxpbmtUYXJnZXRDb250ZW50LmZpbGVwYXRoLFxuXHRcdFx0XHRcdFx0bGlua1RhcmdldENvbnRlbnQuc2VjdGlvblxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0Y29uc3QgcHJvbXB0UmVzb2x2ZXIgPSBuZXcgUHJvbXB0UmVzb2x2ZXIodGhpcy5hcHAsIG5ld1Byb21wdEhpc3RvcnkpO1xuXHRcdFx0XHRcdHZhcmlhYmxlc1trZXldID0gYXdhaXQgcHJvbXB0UmVzb2x2ZXIucmVzb2x2ZVByb21wdChuZXdQcm9tcHQsIGxpbmtUYXJnZXRDb250ZW50LmZpbGVwYXRoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXJpYWJsZXNba2V5XSA9IHdpdGhvdXRGcm9udG1hdHRlcjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBwcm9tcHQucmVtcGxhY2VQbGFjZWhvbGRlcnModmFyaWFibGVzKVxuXHR9XG5cblxuXHRwcml2YXRlIGFzeW5jIGRldGVybWluZVZhcmlhYmxlVmFsdWUobGlua3RleHQ6IGFueSwgbWFpbmZpbGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHtjb250ZW50OiBzdHJpbmcsIGZpbGVwYXRoOiBzdHJpbmcsIHNlY3Rpb246IHN0cmluZyB8IHVuZGVmaW5lZH0gfCB1bmRlZmluZWQ+IHtcblx0XHQvLyBVdGlsaXNlIHBhcnNlTGlua3RleHQgcG91ciBleHRyYWlyZSBjaGVtaW4gZXQgc291cy1jaGVtaW5cblx0XHRjb25zdCBwYXJzZWQgPSB0aGlzLnBhcnNlTGlua3RleHQobGlua3RleHQpO1xuXHRcdGlmICghcGFyc2VkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRjb25zdCB7IHBhdGgsIHN1YnBhdGggfSA9IHBhcnNlZDtcblxuXHRcdC8vIFJcdTAwRTlzb3VkcmUgbGUgY2hlbWluIGR1IGxpZW5cblx0XHRjb25zdCBkZXN0RmlsZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QocGF0aCwgbWFpbmZpbGVQYXRoKTtcblxuXHRcdGlmICghZGVzdEZpbGUpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgRmlsZSAnJHtwYXRofScgbm90IGZvdW5kYCk7XG5cdFx0fVxuXHRcdGNvbnN0IGxpbmtlZEZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZGVzdEZpbGUucGF0aCk7XG5cdFx0aWYgKCEobGlua2VkRmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdubyBpbnN0YW5jZSBvZiBURmlsZScpO1xuXHRcdH1cblx0XHQvLyBMaXJlIGxlIGNvbnRlbnUgZHUgZmljaGllciBsaVx1MDBFOVxuXHRcdGxldCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChsaW5rZWRGaWxlKTtcblxuXHRcdC8vIFNpIHVuIHNvdXMtY2hlbWluIGVzdCBzcFx1MDBFOWNpZmlcdTAwRTksIGV4dHJhaXJlIGxhIHNlY3Rpb24gc3BcdTAwRTljaWZpcXVlIGR1IGNvbnRlbnVcblx0XHRsZXQgcmVzdWx0O1xuXHRcdGlmIChzdWJwYXRoKSB7XG5cdFx0XHRyZXN1bHQgPSB0aGlzLmV4dHJhY3RTZWN0aW9uQ29udGVudChjb250ZW50LCBzdWJwYXRoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gY29udGVudDtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29udGVudDogcmVzdWx0LFxuXHRcdFx0ZmlsZXBhdGg6IGRlc3RGaWxlLnBhdGgsXG5cdFx0XHRzZWN0aW9uOiBzdWJwYXRoXG5cdFx0fTtcblx0fVxuXG5cdHByaXZhdGUgcGFyc2VMaW5rdGV4dChsaW5rdGV4dDogc3RyaW5nKTogeyBwYXRoOiBzdHJpbmc7IHN1YnBhdGg/OiBzdHJpbmcgfSB8IHVuZGVmaW5lZCB7XG5cdFx0Ly8gSWNpLCB0dSBkb2lzIFx1MDBFOWNyaXJlIGR1IGNvZGUgcG91ciBhbmFseXNlciBsZSBsaWVuIGV0IGV4dHJhaXJlIGxlIGNoZW1pbiBldCBsZSBzb3VzLWNoZW1pblxuXHRcdC8vIENldHRlIGZvbmN0aW9uIGVzdCB1biBleGVtcGxlIGRlIHN0cnVjdHVyZSBldCBkb2l0IFx1MDBFQXRyZSBhZGFwdFx1MDBFOWUgXHUwMEUwIHRvbiBiZXNvaW5cblx0XHRjb25zdCBtYXRjaCA9IGxpbmt0ZXh0Lm1hdGNoKC9cXFtcXFsoW15cXF1dKz8pKCMoW14jXSs/KSk/XFxdXFxdLyk7XG5cblx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdGNvbnN0IGxpbmtBbmRMYWJlbCA9IG1hdGNoWzFdLnNwbGl0KCd8Jyk7XG5cdFx0XHRyZXR1cm4geyBwYXRoOiBsaW5rQW5kTGFiZWxbMF0sIHN1YnBhdGg6IG1hdGNoWzNdIH07XG5cdFx0fVxuXHRcdHJldHVybiB1bmRlZmluZWQ7IC8vIENhcyBwYXIgZFx1MDBFOWZhdXQgc2kgbGUgbGllbiBuJ2VzdCBwYXMgYXUgZm9ybWF0IGF0dGVuZHVcblx0fVxuXG5cdHByaXZhdGUgZXh0cmFjdFNlY3Rpb25Db250ZW50KGNvbnRlbnQ6IHN0cmluZywgc3VicGF0aDogc3RyaW5nKTogc3RyaW5nIHtcblx0XHRjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpO1xuXHRcdGxldCBzZWN0aW9uQ29udGVudCA9ICcnO1xuXHRcdGxldCBpblNlY3Rpb24gPSBmYWxzZTtcblx0XHRsZXQgY3VycmVudExldmVsID0gMDtcblxuXHRcdGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuXHRcdFx0Y29uc3QgaGVhZGVyTWF0Y2ggPSBsaW5lLm1hdGNoKC9eKCMrKVxccysoLiopLyk7XG5cdFx0XHRpZiAoaGVhZGVyTWF0Y2gpIHtcblx0XHRcdFx0Y29uc3QgbGV2ZWwgPSBoZWFkZXJNYXRjaFsxXS5sZW5ndGg7XG5cdFx0XHRcdGNvbnN0IHRpdGxlID0gaGVhZGVyTWF0Y2hbMl0udHJpbSgpO1xuXG5cdFx0XHRcdGlmIChpblNlY3Rpb24gJiYgbGV2ZWwgPD0gY3VycmVudExldmVsKSB7XG5cdFx0XHRcdFx0Ly8gU2kgb24gZXN0IGRcdTAwRTlqXHUwMEUwIGRhbnMgbGEgc2VjdGlvbiBldCBxdSdvbiByZW5jb250cmUgdW4gaGVhZGVyIGRlIG5pdmVhdSBcdTAwRTlnYWwgb3Ugc3VwXHUwMEU5cmlldXIsXG5cdFx0XHRcdFx0Ly8gY2VsYSBzaWduaWZpZSBxdSdvbiBhIGF0dGVpbnQgbGEgZmluIGRlIGxhIHNlY3Rpb24gZCdpbnRcdTAwRTlyXHUwMEVBdC5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0aXRsZSA9PT0gc3VicGF0aCkge1xuXHRcdFx0XHRcdC8vIFNpIGxlIHRpdHJlIGNvcnJlc3BvbmQgYXUgc3VicGF0aCByZWNoZXJjaFx1MDBFOSxcblx0XHRcdFx0XHQvLyBvbiBjb21tZW5jZSBcdTAwRTAgY2FwdHVyZXIgbGUgY29udGVudSBcdTAwRTAgcGFydGlyIGRlIGNlIHBvaW50LlxuXHRcdFx0XHRcdGluU2VjdGlvbiA9IHRydWU7XG5cdFx0XHRcdFx0Y3VycmVudExldmVsID0gbGV2ZWw7XG5cdFx0XHRcdFx0Y29udGludWU7IC8vIFBhc3NlIFx1MDBFMCBsJ2l0XHUwMEU5cmF0aW9uIHN1aXZhbnRlIHNhbnMgYWpvdXRlciBsZSB0aXRyZSBsdWktbVx1MDBFQW1lIGF1IGNvbnRlbnUuXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKGluU2VjdGlvbikge1xuXHRcdFx0XHQvLyBBam91dGUgbGEgbGlnbmUgY291cmFudGUgYXUgY29udGVudSBkZSBsYSBzZWN0aW9uIHNpIG9uIGVzdCBkYW5zIGxhIHNlY3Rpb24gZCdpbnRcdTAwRTlyXHUwMEVBdC5cblx0XHRcdFx0c2VjdGlvbkNvbnRlbnQgKz0gbGluZSArICdcXG4nO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBzZWN0aW9uQ29udGVudC50cmltKCk7XG5cdH1cbn1cbiIsICJpbXBvcnQgeyBQTEFDRUhPTERFUl9SRUdFWCB9IGZyb20gXCIuL3Byb21wdFwiO1xuXG50eXBlIFBsYWNlaG9sZGVyTGV2ZWxzID0geyBbcGxhY2Vob2xkZXI6IHN0cmluZ106IG51bWJlciB9O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVsZXZlbE1hcmtkb3duSGVhZGVycyhtYXJrZG93bjogc3RyaW5nLCB0YXJnZXRCYXNlTGV2ZWw6IG51bWJlcik6IHN0cmluZyB7XG5cdGNvbnN0IGxpbmVzID0gbWFya2Rvd24uc3BsaXQoJ1xcbicpO1xuXHRsZXQgYWRqdXN0ZWRNYXJrZG93biA9ICcnO1xuXG5cdC8vIFRyb3V2ZXIgbGUgbml2ZWF1IG1pbmltdW0gYWN0dWVsIGRlcyBoZWFkZXJzIGRhbnMgbGUgbWFya2Rvd25cblx0bGV0IG1pbkN1cnJlbnRMZXZlbCA9IEluZmluaXR5O1xuXHRsaW5lcy5mb3JFYWNoKGxpbmUgPT4ge1xuXHRcdGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaCgvXigjKykvKTtcblx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdGNvbnN0IGxldmVsID0gbWF0Y2hbMF0ubGVuZ3RoO1xuXHRcdFx0aWYgKGxldmVsIDwgbWluQ3VycmVudExldmVsKSB7XG5cdFx0XHRcdG1pbkN1cnJlbnRMZXZlbCA9IGxldmVsO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gQ2FsY3VsZXIgbGUgZFx1MDBFOWNhbGFnZSBuXHUwMEU5Y2Vzc2FpcmUgcG91ciBhanVzdGVyIGxlIG5pdmVhdSBkZXMgaGVhZGVyc1xuXHRjb25zdCBsZXZlbE9mZnNldCA9IHRhcmdldEJhc2VMZXZlbCAtIG1pbkN1cnJlbnRMZXZlbDtcblxuXHRsaW5lcy5mb3JFYWNoKGxpbmUgPT4ge1xuXHRcdGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaCgvXigjKykoXFxzKy4qKS8pO1xuXHRcdGlmIChtYXRjaCkge1xuXHRcdFx0bGV0IG5ld0xldmVsID0gbWF0Y2hbMV0ubGVuZ3RoICsgbGV2ZWxPZmZzZXQ7XG5cdFx0XHRpZiAobmV3TGV2ZWwgPCAxKSBuZXdMZXZlbCA9IDE7IC8vIEFzc3VyZSBxdWUgbGUgbml2ZWF1IGVzdCBhdSBtb2lucyAxXG5cdFx0XHRpZiAobmV3TGV2ZWwgPiA2KSB7XG5cdFx0XHRcdC8vIFNpIGxlIG5pdmVhdSBkXHUwMEU5cGFzc2UgNiwgY29udmVydGlyIGVuIHRleHRlIGVuIGdyYXMgYXZlYyBudW1cdTAwRTlyb3RhdGlvblxuXHRcdFx0XHRjb25zdCBib2xkVGV4dCA9IGAqKiR7bmV3TGV2ZWwgLSA2fS4gJHttYXRjaFsyXS50cmltKCl9KipgO1xuXHRcdFx0XHRhZGp1c3RlZE1hcmtkb3duICs9IGJvbGRUZXh0ICsgJ1xcbic7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCBuZXdIZWFkZXIgPSBgJHsnIycucmVwZWF0KG5ld0xldmVsKX0ke21hdGNoWzJdfWA7XG5cdFx0XHRcdGFkanVzdGVkTWFya2Rvd24gKz0gbmV3SGVhZGVyICsgJ1xcbic7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFkanVzdGVkTWFya2Rvd24gKz0gbGluZSArICdcXG4nO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIGFkanVzdGVkTWFya2Rvd24udHJpbSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVBsYWNlSG9sZGVyc01hcmtkb3duTGV2ZWwobWFya2Rvd246IHN0cmluZyk6IFBsYWNlaG9sZGVyTGV2ZWxzIHtcblx0Y29uc3QgbGluZXMgPSBtYXJrZG93bi5zcGxpdCgnXFxuJyk7XG5cdGxldCBjdXJyZW50TGV2ZWwgPSAwO1xuXHRsZXQgcmVzdWx0OiBQbGFjZWhvbGRlckxldmVscyA9IHt9O1xuXG5cdGxpbmVzLmZvckVhY2gobGluZSA9PiB7XG5cdFx0Ly8gRFx1MDBFOXRlY3RlciBsZXMgbml2ZWF1eCBkZSBoZWFkZXJcblx0XHRjb25zdCBoZWFkZXJNYXRjaCA9IGxpbmUubWF0Y2goL14oIyspLyk7XG5cdFx0aWYgKGhlYWRlck1hdGNoKSB7XG5cdFx0XHRjdXJyZW50TGV2ZWwgPSBoZWFkZXJNYXRjaFswXS5sZW5ndGg7XG5cdFx0fVxuXG5cdFx0Ly8gRFx1MDBFOXRlY3RlciBsZXMgcGxhY2Vob2xkZXJzXG5cdFx0Y29uc3QgcGxhY2Vob2xkZXJNYXRjaGVzID0gWy4uLmxpbmUubWF0Y2hBbGwobmV3IFJlZ0V4cChQTEFDRUhPTERFUl9SRUdFWCwgJ2cnKSldO1xuXHRcdHBsYWNlaG9sZGVyTWF0Y2hlcy5mb3JFYWNoKG1hdGNoID0+IHtcblx0XHRcdGNvbnN0IHBsYWNlaG9sZGVyTmFtZSA9IG1hdGNoWzFdO1xuXHRcdFx0aWYgKHBsYWNlaG9sZGVyTmFtZSAmJiAhKHBsYWNlaG9sZGVyTmFtZSBpbiByZXN1bHQpKSB7XG5cdFx0XHRcdC8vIEFzc2lnbmVyIGxlIG5pdmVhdSBhY3R1ZWwgYXUgcGxhY2Vob2xkZXIgcydpbCBuJ2EgcGFzIGVuY29yZSBcdTAwRTl0XHUwMEU5IHRyb3V2XHUwMEU5XG5cdFx0XHRcdHJlc3VsdFtwbGFjZWhvbGRlck5hbWVdID0gY3VycmVudExldmVsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gUlx1MDBFOWluaXRpYWxpc2VyIGxlIG5pdmVhdSBwb3VyIGxlcyBsaWduZXMgc2FucyBoZWFkZXJcblx0XHRpZiAoIWhlYWRlck1hdGNoICYmICFsaW5lLnRyaW0oKS5zdGFydHNXaXRoKCd7eycpKSB7XG5cdFx0XHRjdXJyZW50TGV2ZWwgPSAwO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIHJlc3VsdDtcbn1cbiIsICJpbXBvcnQgeyBjb21wdXRlUGxhY2VIb2xkZXJzTWFya2Rvd25MZXZlbCwgcmVsZXZlbE1hcmtkb3duSGVhZGVycyB9IGZyb20gXCIuL21hcmtkb3duLWxldmVsZXJcIjtcblxuZXhwb3J0IGNvbnN0IFBMQUNFSE9MREVSX1JFR0VYID0gJ1xcXFx7XFxcXHsoW1xcXFx3LV0rKVxcXFx9XFxcXH0nO1xuXG5leHBvcnQgY2xhc3MgUHJvbXB0IHtcblx0Y29uc3RydWN0b3IoXG5cdFx0cHVibGljIHJlYWRvbmx5IHRlbXBsYXRlOiBzdHJpbmcsXG5cdFx0cHJpdmF0ZSByZWFkb25seSBmaWxlcGF0aDogc3RyaW5nLFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgc2VjdGlvbjogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkXG5cdCkge31cblxuXHRwdWJsaWMgcmVtcGxhY2VQbGFjZWhvbGRlcnModmFyaWFibGVzOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSk6IHN0cmluZyB7XG5cdFx0Y29uc3QgcGxhY2Vob2xkZXJzTGV2ZWxzID0gY29tcHV0ZVBsYWNlSG9sZGVyc01hcmtkb3duTGV2ZWwodGhpcy50ZW1wbGF0ZSk7XG5cdFx0cmV0dXJuIHRoaXMudGVtcGxhdGUucmVwbGFjZShuZXcgUmVnRXhwKFBMQUNFSE9MREVSX1JFR0VYLCAnZycpLCAobWF0Y2gsIHZhcmlhYmxlTmFtZSkgPT4ge1xuXHRcdFx0aWYgKCF2YXJpYWJsZXMuaGFzT3duUHJvcGVydHkodmFyaWFibGVOYW1lKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFZhcmlhYmxlICcke3ZhcmlhYmxlTmFtZX0nIG5vdCBmb3VuZGApO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgcGxhY2Vob2xkZXJMZXZlbCA9IHBsYWNlaG9sZGVyc0xldmVsc1t2YXJpYWJsZU5hbWVdO1xuXHRcdFx0Y29uc3QgbWFya2Rvd24gPSB2YXJpYWJsZXNbdmFyaWFibGVOYW1lXTtcblx0XHRcdHJldHVybiByZWxldmVsTWFya2Rvd25IZWFkZXJzKG1hcmtkb3duLCBwbGFjZWhvbGRlckxldmVsICsgMSk7XG5cdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgaXNFcXVhbChvdGhlcjogUHJvbXB0KTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuZmlsZXBhdGggPT09IG90aGVyLmZpbGVwYXRoICYmIHRoaXMuc2VjdGlvbiA9PT0gb3RoZXIuc2VjdGlvbjtcblx0fVxuXG5cdHB1YmxpYyBnZXRQcm9tcHRJZCgpOiBzdHJpbmcge1xuXHRcdHJldHVybiAhIXRoaXMuc2VjdGlvbiA/IGAke3RoaXMuZmlsZXBhdGh9IyR7dGhpcy5zZWN0aW9ufWAgOiB0aGlzLmZpbGVwYXRoO1xuXHR9XG5cbn1cbiIsICJleHBvcnQgZnVuY3Rpb24gZ2V0VmFyaWFibGVzKGNvbnRlbnQ6IHN0cmluZyk6IFNldDxzdHJpbmc+IHtcblx0Y29uc3QgcmVnZXggPSAve3soW1xcdy1dKyl9fS9nOyAvLyBNb2RpZmlcdTAwRTkgcG91ciBpbmNsdXJlIGRlcyB0aXJldHMgZGFucyBsZXMgbm9tcyBkZSB2YXJpYWJsZXNcblx0bGV0IG1hdGNoO1xuXHRjb25zdCB2YXJpYWJsZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuXHR3aGlsZSAoKG1hdGNoID0gcmVnZXguZXhlYyhjb250ZW50KSkgIT09IG51bGwpIHtcblx0XHR2YXJpYWJsZXMuYWRkKG1hdGNoWzFdKTtcblx0fVxuXHRyZXR1cm4gdmFyaWFibGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2dCbG9jQ29udGVudChjb250ZW50OiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuXHQvLyBNb2RpZmljYXRpb24gZGUgbCdleHByZXNzaW9uIHJcdTAwRTlndWxpXHUwMEU4cmUgcG91ciBpZ25vcmVyIGxlcyBlc3BhY2VzIGF2YW50IGV0IGFwclx1MDBFOHMgbGUgYmxvYyBgc2dgXG5cdGNvbnN0IHJlZ2V4ID0gL15cXHMqYGBgc2dcXG4oW1xcc1xcU10qPylcXG5gYGBcXHMqJC87XG5cdGNvbnN0IGNvcnJlc3BvbmRhbmNlID0gY29udGVudC5tYXRjaChyZWdleCk7XG5cdGlmIChjb3JyZXNwb25kYW5jZSkge1xuXHRcdHJldHVybiBjb3JyZXNwb25kYW5jZVsxXS50cmltKCk7IC8vIFJldG91cm5lIGxlIGNvbnRlbnUgZHUgYmxvYyBzZywgZW4gcmV0aXJhbnQgbGVzIGVzcGFjZXMgZGUgZFx1MDBFOWJ1dCBldCBkZSBmaW5cblx0fVxuXHRyZXR1cm4gdW5kZWZpbmVkOyAvLyBSZXRvdXJuZSB1bmRlZmluZWQgc2kgbGUgdGV4dGUgbidlc3QgcGFzIHVuIGJsb2Mgc2dcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUZyb250bWF0dGVyKGNvbnRlbnQ6IHN0cmluZykge1xuXHQvLyBDZXR0ZSBleHByZXNzaW9uIHJcdTAwRTlndWxpXHUwMEU4cmUgY2hlcmNoZSBsZXMgcGFydGllcyBlbmNhZHJcdTAwRTllcyBwYXIgXCItLS1cIiBhdSBkXHUwMEU5YnV0IGR1IHRleHRlXG5cdGNvbnN0IHJlZ2V4ID0gL14tLS1bXFxzXFxTXSs/LS0tXFxuPy87XG5cdC8vIFJlbXBsYWNlIGxlIGZyb250bWF0dGVyIHBhciB1bmUgY2hhXHUwMEVFbmUgdmlkZSBzJ2lsIGVzdCB0cm91dlx1MDBFOVxuXHRyZXR1cm4gY29udGVudC5yZXBsYWNlKHJlZ2V4LCAnJyk7XG59XG5cbiIsICJpbXBvcnQgeyBBcHAsIE1vZGFsLCBTZXR0aW5nIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmV4cG9ydCBjbGFzcyBDb3B5UHJvbXB0TW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG5cdHByb21wdDogc3RyaW5nO1xuXHRvblN1Ym1pdDogKHJlc3VsdDogc3RyaW5nKSA9PiB2b2lkO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwcm9tcHQ6IHN0cmluZywgb25TdWJtaXQ6IChyZXN1bHQ6IHN0cmluZykgPT4gdm9pZCkge1xuXHRcdHN1cGVyKGFwcCk7XG5cdFx0dGhpcy5vblN1Ym1pdCA9IG9uU3VibWl0O1xuXHRcdHRoaXMucHJvbXB0ID0gcHJvbXB0O1xuXHR9XG5cblx0b25PcGVuKCkge1xuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuXG5cdFx0Y29udGVudEVsLmNyZWF0ZUVsKFwiaDFcIiwgeyB0ZXh0OiBcIlByb21wdFwiIH0pO1xuXG5cdFx0Y29uc3QgdGV4dGFyZWEgPSBjb250ZW50RWwuY3JlYXRlRWwoXCJ0ZXh0YXJlYVwiLCB7XG5cdFx0XHRhdHRyOiB7XG5cdFx0XHRcdHN0eWxlOiBcIndpZHRoOiAxMDAlOyBib3gtc2l6aW5nOiBib3JkZXItYm94OyBtYXJnaW4tYm90dG9tOiAyMHB4O1wiIC8vIEFzc3VyZSBxdWUgbGUgdGV4dGFyZWEgcHJlbmQgdG91dGUgbGEgbGFyZ2V1ciBldCBham91dGUgdW4gcGV1IGQnZXNwYWNlIGVuIGRlc3NvdXNcblx0XHRcdH1cblx0XHR9KTtcblx0XHR0ZXh0YXJlYS52YWx1ZSA9IHRoaXMucHJvbXB0O1xuXHRcdHRleHRhcmVhLnJvd3MgPSAxMDtcblxuXHRcdGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiLCB7XG5cdFx0XHRhdHRyOiB7XG5cdFx0XHRcdHN0eWxlOiBcInRleHQtYWxpZ246IHJpZ2h0O1wiIC8vIEFsaWduZW1lbnQgZHUgYm91dG9uIFx1MDBFMCBkcm9pdGVcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGNvbnN0IGJ1dHRvbiA9IGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbChcImJ1dHRvblwiLCB7IHRleHQ6IFwiU3VibWl0XCIgfSk7XG5cdFx0YnV0dG9uLmFkZENsYXNzKFwibW9kLWN0YVwiKTtcblx0XHRidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcblx0XHRcdHRoaXMuY2xvc2UoKTtcblx0XHRcdHRoaXMub25TdWJtaXQodGV4dGFyZWEudmFsdWUpO1xuXHRcdH0pO1xuXHR9XG5cblx0b25DbG9zZSgpIHtcblx0XHRsZXQgeyBjb250ZW50RWwgfSA9IHRoaXM7XG5cdFx0Y29udGVudEVsLmVtcHR5KCk7XG5cdH1cbn1cbiIsICJpbXBvcnQgeyBNb2RhbCwgQXBwLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBjbGFzcyBFcnJvck1vZGFsIGV4dGVuZHMgTW9kYWwge1xuXHRtZXNzYWdlOiBzdHJpbmc7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIG1lc3NhZ2U6IHN0cmluZykge1xuXHRcdHN1cGVyKGFwcCk7XG5cdFx0dGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcblx0fVxuXG5cdG9uT3BlbigpIHtcblx0XHRjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcblxuXHRcdC8vIENyXHUwMEU5ZXIgdW4gXHUwMEU5bFx1MDBFOW1lbnQgZGUgcGFyYWdyYXBoZSBwb3VyIGxlIG1lc3NhZ2Vcblx0XHRjb25zdCBtZXNzYWdlRWwgPSBjb250ZW50RWwuY3JlYXRlRWwoJ3AnKTtcblx0XHRtZXNzYWdlRWwuc2V0VGV4dCh0aGlzLm1lc3NhZ2UpO1xuXG5cdFx0Ly8gQ3JcdTAwRTllciB1biBib3V0b24gZW4gZGVzc291cyBkdSBtZXNzYWdlXG5cdFx0Y29uc3Qgb2tCdXR0b24gPSBjb250ZW50RWwuY3JlYXRlRWwoJ2J1dHRvbicsIHtcblx0XHRcdHRleHQ6ICdPSycsXG5cdFx0XHRjbHM6ICdtb2QtY3RhJyAgLy8gVXRpbGlzZSB1bmUgY2xhc3NlIHBvdXIgYWpvdXRlciBkZXMgc3R5bGVzIHNwXHUwMEU5Y2lmaXF1ZXMgc2kgblx1MDBFOWNlc3NhaXJlXG5cdFx0fSk7XG5cdFx0b2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG5cdFx0XHR0aGlzLmNsb3NlKCk7XG5cdFx0fSk7XG5cblx0XHQvLyBTdHlsZSBvcHRpb25uZWwgcG91ciBhbVx1MDBFOWxpb3JlciBsJ2FwcGFyZW5jZVxuXHRcdGNvbnRlbnRFbC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuXHRcdGNvbnRlbnRFbC5zdHlsZS5mbGV4RGlyZWN0aW9uID0gJ2NvbHVtbic7XG5cdFx0Y29udGVudEVsLnN0eWxlLmFsaWduSXRlbXMgPSAnY2VudGVyJztcblx0XHRjb250ZW50RWwuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAnY2VudGVyJztcblx0fVxuXG5cdG9uQ2xvc2UoKSB7XG5cdFx0Y29uc3Qge2NvbnRlbnRFbH0gPSB0aGlzO1xuXHRcdGNvbnRlbnRFbC5lbXB0eSgpO1xuXHR9XG59XG5cbi8vIFV0aWxpc2F0aW9uOlxuZnVuY3Rpb24gc2hvd0Vycm9yKGFwcDogQXBwLCBtZXNzYWdlOiBzdHJpbmcpIHtcblx0bmV3IEVycm9yTW9kYWwoYXBwLCBtZXNzYWdlKS5vcGVuKCk7XG59XG5cbi8vIEFwcGVsZXIgc2hvd0Vycm9yIHF1ZWxxdWUgcGFydCBkYW5zIHRvbiBjb2RlIGF2ZWMgbCdpbnN0YW5jZSBkJ0FwcCBldCBsZSBtZXNzYWdlIGQnZXJyZXVyIDpcbi8vIHNob3dFcnJvcihhcHAsICdVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51ZSwgdmV1aWxsZXogclx1MDBFOWVzc2F5ZXIuJyk7XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUEsbUJBQXVCOzs7QUNBdkIsSUFBQUMsbUJBQXFEOzs7QUNBckQsc0JBQTJCOzs7QUNJcEIsU0FBUyx1QkFBdUIsVUFBa0IsaUJBQWlDO0FBQ3pGLFFBQU0sUUFBUSxTQUFTLE1BQU0sSUFBSTtBQUNqQyxNQUFJLG1CQUFtQjtBQUd2QixNQUFJLGtCQUFrQjtBQUN0QixRQUFNLFFBQVEsVUFBUTtBQUNyQixVQUFNLFFBQVEsS0FBSyxNQUFNLE9BQU87QUFDaEMsUUFBSSxPQUFPO0FBQ1YsWUFBTSxRQUFRLE1BQU0sQ0FBQyxFQUFFO0FBQ3ZCLFVBQUksUUFBUSxpQkFBaUI7QUFDNUIsMEJBQWtCO0FBQUEsTUFDbkI7QUFBQSxJQUNEO0FBQUEsRUFDRCxDQUFDO0FBR0QsUUFBTSxjQUFjLGtCQUFrQjtBQUV0QyxRQUFNLFFBQVEsVUFBUTtBQUNyQixVQUFNLFFBQVEsS0FBSyxNQUFNLGNBQWM7QUFDdkMsUUFBSSxPQUFPO0FBQ1YsVUFBSSxXQUFXLE1BQU0sQ0FBQyxFQUFFLFNBQVM7QUFDakMsVUFBSSxXQUFXO0FBQUcsbUJBQVc7QUFDN0IsVUFBSSxXQUFXLEdBQUc7QUFFakIsY0FBTSxXQUFXLEtBQUssV0FBVyxNQUFNLE1BQU0sQ0FBQyxFQUFFLEtBQUs7QUFDckQsNEJBQW9CLFdBQVc7QUFBQSxNQUNoQyxPQUFPO0FBQ04sY0FBTSxZQUFZLEdBQUcsSUFBSSxPQUFPLFFBQVEsSUFBSSxNQUFNLENBQUM7QUFDbkQsNEJBQW9CLFlBQVk7QUFBQSxNQUNqQztBQUFBLElBQ0QsT0FBTztBQUNOLDBCQUFvQixPQUFP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QUFNLFNBQVMsU0FBUyxjQUFjLEtBQUs7QUFDM0MsV0FBTyxVQUFVLElBQUksZ0JBQWdCO0FBQ3JDLFdBQU8sYUFBYSxjQUFjLEtBQUs7QUFFdkMsV0FBTyxZQUFZO0FBRW5CLFdBQU87QUFBQSxFQUNSO0FBRUQ7OztBRHJGQSxJQUFNLG1CQUEyQztBQUFBLEVBQ2hELFdBQVc7QUFDWjtBQUVBLElBQXFCLGlCQUFyQixjQUE0Qyx3QkFBTztBQUFBLEVBR2xELE1BQU0sU0FBUztBQUNkLFVBQU0sS0FBSyxhQUFhO0FBRXhCLFFBQUksUUFBUSxJQUFJO0FBQUEsRUFDakI7QUFBQSxFQUVBLFdBQVc7QUFBQSxFQUVYO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUMxRTtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ3BCLFVBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUFBLEVBQ2xDO0FBQ0Q7IiwKICAibmFtZXMiOiBbImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiJdCn0K
